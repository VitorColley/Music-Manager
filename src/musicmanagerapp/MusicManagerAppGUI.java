/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package musicmanagerapp;

import javax.swing.JOptionPane;

/**
 *
 * @author Vitor Colley
 */
public class MusicManagerAppGUI extends javax.swing.JFrame {

    //create a stack for the liked songs so that only the last song added can be manipulated in turn
    Stack likedSongs = new Stack();
    //create linear lists for the remaining playlists as they will be manipulated in various manners
    LinearPlaylist happyPlaylist = new LinearPlaylist();
    LinearPlaylist sadPlaylist = new LinearPlaylist();
    LinearPlaylist dancingPlaylist = new LinearPlaylist();
    LinearPlaylist exercisingPlaylist = new LinearPlaylist();

    //boolean that determines if playlists are set to repeat or not
    boolean repeatHappy = false;
    boolean repeatSad = false;
    boolean repeatDancing = false;
    boolean repeatExercising = false;

    /**
     * Creates new form MusicManagerAppGUI
     */
    public MusicManagerAppGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainLayer = new javax.swing.JLayeredPane();
        appLbl = new javax.swing.JLabel();
        songLbl = new javax.swing.JLabel();
        songTf = new javax.swing.JTextField();
        mainSp = new javax.swing.JScrollPane();
        displayTa = new javax.swing.JTextArea();
        addBtn = new javax.swing.JButton();
        addSongBtn = new javax.swing.JButton();
        playlistCb = new javax.swing.JComboBox<>();
        playlistSelectLbl = new javax.swing.JLabel();
        removeBtn = new javax.swing.JButton();
        moveBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        printBtn = new javax.swing.JButton();
        repeatBtn = new javax.swing.JButton();
        sizeBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(700, 250));

        appLbl.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        appLbl.setText("Music Manager");

        songLbl.setText("Enter the Song's Name:");

        songTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songTfActionPerformed(evt);
            }
        });

        displayTa.setColumns(20);
        displayTa.setRows(5);
        mainSp.setViewportView(displayTa);

        addBtn.setText("Add Song to Playlist \"Liked Songs\"");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        addSongBtn.setText("Add Song");
        addSongBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSongBtnActionPerformed(evt);
            }
        });

        playlistCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Happy", "Sad", "Dancing", "Exercising" }));
        playlistCb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playlistCbActionPerformed(evt);
            }
        });

        playlistSelectLbl.setText("Select Playlist To Manage:");

        removeBtn.setText("Remove Song");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        moveBtn.setText("Move Song");
        moveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBtnActionPerformed(evt);
            }
        });

        searchBtn.setText("Search Song");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        printBtn.setText("See Playlist");
        printBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBtnActionPerformed(evt);
            }
        });

        repeatBtn.setText("Toggle Repeat");
        repeatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repeatBtnActionPerformed(evt);
            }
        });

        sizeBtn.setText("Check Size");
        sizeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeBtnActionPerformed(evt);
            }
        });

        mainLayer.setLayer(appLbl, javax.swing.JLayeredPane.DEFAULT_LAYER);
        mainLayer.setLayer(songLbl, javax.swing.JLayeredPane.DEFAULT_LAYER);
        mainLayer.setLayer(songTf, javax.swing.JLayeredPane.DEFAULT_LAYER);
        mainLayer.setLayer(mainSp, javax.swing.JLayeredPane.DEFAULT_LAYER);
        mainLayer.setLayer(addBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        mainLayer.setLayer(addSongBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        mainLayer.setLayer(playlistCb, javax.swing.JLayeredPane.DEFAULT_LAYER);
        mainLayer.setLayer(playlistSelectLbl, javax.swing.JLayeredPane.DEFAULT_LAYER);
        mainLayer.setLayer(removeBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        mainLayer.setLayer(moveBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        mainLayer.setLayer(searchBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        mainLayer.setLayer(printBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        mainLayer.setLayer(repeatBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        mainLayer.setLayer(sizeBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout mainLayerLayout = new javax.swing.GroupLayout(mainLayer);
        mainLayer.setLayout(mainLayerLayout);
        mainLayerLayout.setHorizontalGroup(
            mainLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 358, Short.MAX_VALUE)
            .addGroup(mainLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainLayerLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(mainLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(mainSp, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainLayerLayout.createSequentialGroup()
                            .addComponent(songLbl)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(songTf, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(mainLayerLayout.createSequentialGroup()
                            .addComponent(playlistSelectLbl)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(playlistCb, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(addBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(mainLayerLayout.createSequentialGroup()
                            .addComponent(sizeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(mainLayerLayout.createSequentialGroup()
                            .addGroup(mainLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(searchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(printBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addSongBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(mainLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(removeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(moveBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(repeatBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(mainLayerLayout.createSequentialGroup()
                            .addGap(93, 93, 93)
                            .addComponent(appLbl)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap()))
        );
        mainLayerLayout.setVerticalGroup(
            mainLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 391, Short.MAX_VALUE)
            .addGroup(mainLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainLayerLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(appLbl)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(mainLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(songLbl)
                        .addComponent(songTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addComponent(mainSp, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(addBtn)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(mainLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(playlistCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(mainLayerLayout.createSequentialGroup()
                            .addGap(3, 3, 3)
                            .addComponent(playlistSelectLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(mainLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(mainLayerLayout.createSequentialGroup()
                            .addComponent(addSongBtn)
                            .addGap(3, 3, 3)
                            .addComponent(printBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(searchBtn))
                        .addGroup(mainLayerLayout.createSequentialGroup()
                            .addComponent(removeBtn)
                            .addGap(3, 3, 3)
                            .addComponent(moveBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(repeatBtn)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(sizeBtn)
                    .addContainerGap(23, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(mainLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(91, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(mainLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void songTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_songTfActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        //variable to hold the new song created that is extracted from the song text field
        Song newSong = new Song(songTf.getText());
        //check if there is a song to be created
        if (newSong.getName().equalsIgnoreCase("")) {
            displayTa.append("Please enter a Song\n");
        } else {
            //if so then add it to the stack
            likedSongs.push(newSong);
            //display the addition to the user
            displayTa.append(newSong.getName() + " was added to Liked Songs\n");
        }


    }//GEN-LAST:event_addBtnActionPerformed

    private void addSongBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSongBtnActionPerformed
        // variable to hold the song that will be added to the linear list
        Song newSong;
        //checks if a list is selected
        if (playlistCb.getSelectedItem().toString().equalsIgnoreCase(" ")) {
            //otehrwise asks user to select one
            displayTa.append("Please select a Playlist\n");
        } else {
            //retrieves and removes song from stack, holding it in a variable
            newSong = likedSongs.pop();
            //checks if tehre was a song in the stack
            if (newSong != null) {
                //checks the list selected, adds it accordingly and displays action to user
                if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Happy")) {
                    happyPlaylist.add(newSong);
                    displayTa.append(newSong.getName() + " was added to the Happy Playlist\n");
                } else if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Sad")) {
                    sadPlaylist.add(newSong);
                    displayTa.append(newSong.getName() + " was added to the Sad Playlist\n");
                } else if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Dancing")) {
                    dancingPlaylist.add(newSong);
                    displayTa.append(newSong.getName() + " was added to the Dancing Playlist\n");
                } else if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Exercising")) {
                    exercisingPlaylist.add(newSong);
                    displayTa.append(newSong.getName() + " was added to the Exercising Playlist\n");
                }
            } else {
                //informs user the stack is empty and asks user to add a song to it before it can be moved 
                displayTa.append("There are no songs in the Liked Songs playlist\n Please add another song and try again\n");
            }
        }


    }//GEN-LAST:event_addSongBtnActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        // variable to hold the deleted song's index
        int deleteSong;
        // holds the object from the list
        Song object;
        //holds the name of the object in a string
        String deletedSong;
        //checks wich playlist is being manipulated
        if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Happy")) {
            //checks if playlist is empty
            if (happyPlaylist.isEmpty()) {
                displayTa.append("There are no songs to be removed from the Playlist\n");
            } else {
                //displays list and asks for the index of the song to be deleted
                deleteSong = Integer.parseInt(JOptionPane.showInputDialog(null, happyPlaylist.printList() + "Please enter the position of the song you want to remove:"));
                //catch error if user enter an empty index
                try {
                    object = happyPlaylist.get(deleteSong);
                    deletedSong = object.getName();
                    //remove song from list
                    happyPlaylist.remove(deleteSong);
                    displayTa.append(deletedSong + " was removed from the Happy Playlist\n");
                    //add to liked songs again
                    likedSongs.push(object);
                    displayTa.append(deletedSong + " was added back to Liked Songs\n");
                } catch (NullPointerException e) {
                    displayTa.append("There is no song in that position, please try again\n");
                }
            }
            //checks wich playlist is being manipulated     
        } else if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Sad")) {
            //checks if playlist is empty
            if (sadPlaylist.isEmpty()) {
                displayTa.append("There are no songs to be removed from the Playlist\n");
            } else {
                //displays list and asks for the index of the song to be deleted
                deleteSong = Integer.parseInt(JOptionPane.showInputDialog(null, sadPlaylist.printList() + "Please enter the position of the song you want to remove:"));
                //catch error if user enter an empty index
                try {
                    object = sadPlaylist.get(deleteSong);
                    deletedSong = object.getName();
                    //remove song from list
                    sadPlaylist.remove(deleteSong);
                    displayTa.append(deletedSong + " was removed from the Sad Playlist\n");
                    //add to liked songs again
                    likedSongs.push(object);
                    displayTa.append(deletedSong + " was added back to Liked Songs\n");
                } catch (NullPointerException e) {
                    displayTa.append("There is no song in that position, please try again\n");
                }
            }
            //checks wich playlist is being manipulated    
        } else if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Dancing")) {
            //checks if playlist is empty
            if (dancingPlaylist.isEmpty()) {
                displayTa.append("There are no songs to be removed from the Playlist\n");
            } else {
                //displays list and asks for the index of the song to be deleted
                deleteSong = Integer.parseInt(JOptionPane.showInputDialog(null, dancingPlaylist.printList() + "Please enter the position of the song you want to remove:"));
                //catch error if user enter an empty index
                try {
                    object = dancingPlaylist.get(deleteSong);
                    deletedSong = object.getName();
                    //remove song from list
                    dancingPlaylist.remove(deleteSong);
                    displayTa.append(deletedSong + " was removed from the Dancing Playlist\n");
                    //add to liked songs again
                    likedSongs.push(object);
                    displayTa.append(deletedSong + " was added back to Liked Songs\n");
                } catch (NullPointerException e) {
                    displayTa.append("There is no song in that position, please try again\n");
                }
            }
            //checks wich playlist is being manipulated    
        } else if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Exercising")) {
            //checks if playlist is empty
            if (exercisingPlaylist.isEmpty()) {
                displayTa.append("There are no songs to be removed from the Playlist\n");
            } else {
                //displays list and asks for the index of the song to be deleted
                deleteSong = Integer.parseInt(JOptionPane.showInputDialog(null, exercisingPlaylist.printList() + "Please enter the position of the song you want to remove:"));
                //catch error if user enter an empty index
                try {
                    object = exercisingPlaylist.get(deleteSong);
                    deletedSong = object.getName();
                    //remove song from list
                    exercisingPlaylist.remove(deleteSong);
                    displayTa.append(deletedSong + " was removed from the Exercising Playlist\n");
                    //add to liked songs again
                    likedSongs.push(object);
                    displayTa.append(deletedSong + " was added back to Liked Songs\n");
                } catch (NullPointerException e) {
                    displayTa.append("There is no song in that position, please try again\n");
                }
            }
            // asks to slect a playlist if none is selected
        } else {
            displayTa.append("Please select a Playlist\n");

        }
    }//GEN-LAST:event_removeBtnActionPerformed

    private void moveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBtnActionPerformed
        // holds the index where the song is being moved to
        int position;
        //holds the index of the song taht is being moved
        int moveSong;
        Song object;
        String movedSong;
        if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Happy")) {
            if (happyPlaylist.isEmpty()) {
                displayTa.append("There are no songs to be moved in the Playlist\n");
            } else {
                //takes index of the song that is being moved
                moveSong = Integer.parseInt(JOptionPane.showInputDialog(null, happyPlaylist.printList() + "Please, enter the number of the song you want to move:"));
                //takes the position to which the song will be moved
                position = Integer.parseInt(JOptionPane.showInputDialog(null, happyPlaylist.printList() + "Please, enter the position where you want to move the song to:"));
                //catch error if user enter an empty index or position
                try {
                    //holds song
                    object = happyPlaylist.get(moveSong);
                    //holds song's name
                    movedSong = object.getName();
                    //adds to new position
                    happyPlaylist.add(position, object);
                    //delete song from previous position
                    happyPlaylist.remove(moveSong);
                    //displays change to user
                    displayTa.append(movedSong + " was moved to position" + position + "\n");
                } catch (NullPointerException e) {
                    //informs of error
                    displayTa.append("It is not possible to move that song there, please try again\n");
                }

            }

        } else if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Sad")) {
            if (sadPlaylist.isEmpty()) {
                displayTa.append("There are no songs to be moved in the Playlist\n");
            } else {
                moveSong = Integer.parseInt(JOptionPane.showInputDialog(null, sadPlaylist.printList() + "Please, enter the number of the song you want to move:"));
                position = Integer.parseInt(JOptionPane.showInputDialog(null, sadPlaylist.printList() + "Please, enter the position where you want to move the song to:"));
                try {
                    object = sadPlaylist.get(moveSong);
                    movedSong = object.getName();
                    sadPlaylist.add(position, object);
                    sadPlaylist.remove(moveSong);
                    displayTa.append(movedSong + " was moved to position" + position + "\n");
                } catch (NullPointerException e) {
                    displayTa.append("It is not possible to move that song there, please try again\n");
                }
            }

        } else if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Dancing")) {
            if (dancingPlaylist.isEmpty()) {
                displayTa.append("There are no songs to be moved in the Playlist\n");
            } else {
                moveSong = Integer.parseInt(JOptionPane.showInputDialog(null, dancingPlaylist.printList() + "Please, enter the number of the song you want to move:"));
                position = Integer.parseInt(JOptionPane.showInputDialog(null, dancingPlaylist.printList() + "Please, enter the position where you want to move the song to:"));
                try {
                    object = dancingPlaylist.get(moveSong);
                    movedSong = object.getName();                    
                    dancingPlaylist.add(position, object);
                    dancingPlaylist.remove(moveSong);
                    displayTa.append(movedSong + " was moved to position" + position + "\n");
                } catch (NullPointerException e) {
                    displayTa.append("It is not possible to move that song there, please try again\n");
                }
            }

        } else if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Exercising")) {
            if (exercisingPlaylist.isEmpty()) {
                displayTa.append("There are no songs to be moved in the Playlist\n");
            } else {
                moveSong = Integer.parseInt(JOptionPane.showInputDialog(null, exercisingPlaylist.printList() + "Please, enter the number of the song you want to move:"));
                position = Integer.parseInt(JOptionPane.showInputDialog(null, exercisingPlaylist.printList() + "Please, enter the position where you want to move the song to:"));
                try {
                    object = exercisingPlaylist.get(moveSong);
                    movedSong = object.getName();                   
                    exercisingPlaylist.add(position, object);
                    exercisingPlaylist.remove(moveSong);
                    displayTa.append(movedSong + " was moved to position" + position + "\n");
                } catch (NullPointerException e) {
                    displayTa.append("It is not possible to move that song there, please try again\n");
                }
            }

        } else {
            displayTa.append("Please select a Playlist\n");

        }
    }//GEN-LAST:event_moveBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // holds song be found
        String searchTerm;
        //asks user for songs name
        searchTerm = JOptionPane.showInputDialog(null, "Please, enter the name of the song you are looking for:");
        //holds default values for variables, in case all conditions fail
        String playlist = "";
        int position = 0;
        //checks each list for song's name
        for (int i = 1; i <= happyPlaylist.size(); i++) {
            //if found returns the playlist's name and position of song in it
            if (happyPlaylist.get(i).getName().equalsIgnoreCase(searchTerm)) {
                playlist = "Happy";
                position = i;
            }
        }
        if (playlist.equalsIgnoreCase("")) {
            for (int i = 1; i <= sadPlaylist.size(); i++) {
                if (sadPlaylist.get(i).getName().equalsIgnoreCase(searchTerm)) {
                    playlist = "Sad";
                    position = i;
                }
            }
        }
        if (playlist.equalsIgnoreCase("")) {
            for (int i = 1; i <= dancingPlaylist.size(); i++) {
                if (dancingPlaylist.get(i).getName().equalsIgnoreCase(searchTerm)) {
                    playlist = "Dancing";
                    position = i;
                }
            }
        }
        if (playlist.equalsIgnoreCase("")) {
            for (int i = 1; i <= exercisingPlaylist.size(); i++) {
                if (exercisingPlaylist.get(i).getName().equalsIgnoreCase(searchTerm)) {
                    playlist = "Exercising";
                    position = i;
                }
            }
        }
        //if not found returns this message
        if (playlist.equalsIgnoreCase("")) {
            displayTa.append("That song is not in a playlist, please try again\n");
        } else {
            //returns name of playlist and posistion
            displayTa.append("The song " + searchTerm + " is in the " + playlist + " playlist in the position " + position + "\n");
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void printBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBtnActionPerformed
        // checks selected playlist
        if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Happy")) {
            //checks if it is not empty
            if (!happyPlaylist.isEmpty()) {
                //calls method to print
                displayTa.append(happyPlaylist.printList());
            } else {
                //displays that it is empty
                displayTa.append("The Playlist is empty\n");
            }

        } else if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Sad")) {
            if (!sadPlaylist.isEmpty()) {
                displayTa.append(sadPlaylist.printList());
            } else {
                displayTa.append("The Playlist is empty\n");
            }

        } else if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Dancing")) {
            if (!dancingPlaylist.isEmpty()) {
                displayTa.append(dancingPlaylist.printList());
            } else {
                displayTa.append("The Playlist is empty\n");
            }

        } else if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Exercising")) {
            if (!exercisingPlaylist.isEmpty()) {
                displayTa.append(exercisingPlaylist.printList());
            } else {
                displayTa.append("The Playlist is empty\n");
            }
        } else {
            displayTa.append("Please select a Playlist\n");

        }
    }//GEN-LAST:event_printBtnActionPerformed

    private void sizeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeBtnActionPerformed
        // checks playlist selected
        if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Happy")) {
            //recovers size, if empty shows zero songs
            displayTa.append("The Happy Playlist has " + happyPlaylist.size() + " songs in it\n");

        } else if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Sad")) {
            displayTa.append("The Sad Playlist has " + sadPlaylist.size() + " songs in it\n");

        } else if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Dancing")) {
            displayTa.append("The Dancing Playlist has " + dancingPlaylist.size() + " songs in it\n");

        } else if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Exercising")) {
            displayTa.append("The Exercising Playlist has " + exercisingPlaylist.size() + " songs in it\n");

        } else {
            displayTa.append("Please select a Playlist\n");

        }
    }//GEN-LAST:event_sizeBtnActionPerformed

    private void playlistCbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playlistCbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_playlistCbActionPerformed

    private void repeatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repeatBtnActionPerformed
        // checks playlist selected  
        if (playlistCb.getSelectedItem().toString().equalsIgnoreCase(" ")) {
            displayTa.append("Please select a Playlist\n");

        } else {
            if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Happy")) {
                //toggle repeat/untoggle repeat
                if (repeatHappy == false) {
                    repeatHappy = true;
                    displayTa.append("Repeat toggled for the Happy playlist\n");
                } else {
                    repeatHappy = false;
                    displayTa.append("Repeat untoggled for the Happy playlist\n");
                }

            } else if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Sad")) {
                if (repeatSad == false) {
                    repeatSad = true;
                    displayTa.append("Repeat toggled for the Sad playlist\n");
                } else {
                    repeatSad = false;
                    displayTa.append("Repeat untoggled for the Sad playlist\n");
                }

            } else if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Dancing")) {
                if (repeatDancing == false) {
                    repeatDancing = true;
                    displayTa.append("Repeat toggled for the Dancing playlist\n");
                } else {
                    repeatDancing = false;
                    displayTa.append("Repeat untoggled for the Dancing playlist\n");
                }

            } else if (playlistCb.getSelectedItem().toString().equalsIgnoreCase("Exercising")) {
                if (repeatExercising == false) {
                    repeatExercising = true;
                    displayTa.append("Repeat toggled for the Exercising playlist\n");
                } else {
                    repeatExercising = false;
                    displayTa.append("Repeat untoggled for the Exercising playlist\n");
                }

            }

        }

    }//GEN-LAST:event_repeatBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MusicManagerAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MusicManagerAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MusicManagerAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MusicManagerAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MusicManagerAppGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton addSongBtn;
    private javax.swing.JLabel appLbl;
    private javax.swing.JTextArea displayTa;
    private javax.swing.JLayeredPane mainLayer;
    private javax.swing.JScrollPane mainSp;
    private javax.swing.JButton moveBtn;
    private javax.swing.JComboBox<String> playlistCb;
    private javax.swing.JLabel playlistSelectLbl;
    private javax.swing.JButton printBtn;
    private javax.swing.JButton removeBtn;
    private javax.swing.JButton repeatBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton sizeBtn;
    private javax.swing.JLabel songLbl;
    private javax.swing.JTextField songTf;
    // End of variables declaration//GEN-END:variables
}
